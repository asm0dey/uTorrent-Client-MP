/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ru.asm0dey.utorrentaccess.gui;

import ca.odell.glazedlists.EventList;
import ca.odell.glazedlists.GlazedLists;
import ca.odell.glazedlists.gui.TableFormat;
import ca.odell.glazedlists.swing.EventTableModel;
import java.awt.*;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.List;
import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.windows.TopComponent;
import ru.asm0dey.utorrentaccess.utorrentclient.UTorrent;
import ru.asm0dey.utorrentaccess.utorrentclient.domain.SingleListTorrent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties( dtd = "-//ru.asm0dey.utorrentaccess.gui//MainList//EN", autostore = false)
@TopComponent.Description( preferredID = "MainListTopComponent",
// iconBase="SET/PATH/TO/ICON/HERE",
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration( mode = "editor", openAtStartup = true)
@ActionID( category = "Window", id = "ru.asm0dey.utorrentaccess.gui.MainListTopComponent")
@ActionReference( path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration( displayName = "#CTL_MainListAction", preferredID = "MainListTopComponent")
@Messages({"CTL_MainListAction=MainList", "CTL_MainListTopComponent=MainList Window", "HINT_MainListTopComponent=This is a MainList window"})
public final class MainListTopComponent extends TopComponent implements LookupListener {

    private final InstanceContent content;

    public MainListTopComponent() throws IOException {
        initComponents();
        initTable();
        setName(Bundle.CTL_MainListTopComponent());
        setToolTipText(Bundle.HINT_MainListTopComponent());
        putClientProperty(TopComponent.PROP_CLOSING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_DRAGGING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_UNDOCKING_DISABLED, Boolean.TRUE);
        content = new InstanceContent();
        associateLookup(new AbstractLookup(content));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable1.setDoubleBuffered(true);
        jTable1.setFillsViewportHeight(true);
        jTable1.setAutoCreateRowSorter(true);
        jScrollPane1.setViewportView(jTable1);

        add(jScrollPane1);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    private void initTable() throws IOException {
//        final UTorrent instance = UTorrent.getInstance("192.168.1.2", 8080, "admin", "");
//        final List<SingleListTorrent> torrents = instance.getTorrentList().getTorrents();
//        final int length = torrents.size();
//        DefaultTableModel model = new DefaultTableModel(new Object[]{"Name", "% Completed", "Hash"}, length) {
//            @Override
//            public boolean isCellEditable(int row, int column) {
//                return false;
//            }
//        };
//        jTable1.setModel(model);
//        final TableColumn progressColumn = jTable1.getColumnModel().getColumn(1);
//        jTable1.setRowSorter(new TableRowSorter(model));
//        progressColumn.setCellRenderer(new ProgressRenderer());
//        for (int i = 0; i < torrents.size(); i++) {
//            SingleListTorrent singleListTorrent = torrents.get(i);
//            jTable1.setValueAt(singleListTorrent.getName(), i, 0);
//            jTable1.setValueAt(singleListTorrent.getPercentReady(), i, 1);
//            jTable1.setValueAt(singleListTorrent.getHash(), i, 2);
//        }
//        final ListSelectionModel selectionModel = jTable1.getSelectionModel();
//        selectionModel.addListSelectionListener(new ListSelectionListener() {
//            @Override
//            public void valueChanged(ListSelectionEvent e) {
//                final int[] selectedRows = jTable1.getSelectedRows();
//                if (selectedRows.length != 0&&!e.getValueIsAdjusting()) {
//                    for (int i : selectedRows) {
//                        try {
//                            final String hash = (String) jTable1.getValueAt(i, 2);
//                            content.add(instance.getFilesByTorrentHash(hash));
//                        } catch (IOException ex) {
//                            Exceptions.printStackTrace(ex);
//                        }
//                    }
//                }
//            }
//        });
        final UTorrent instance = UTorrent.getInstance("192.168.1.2", 8080, "admin", "");
        final List<SingleListTorrent> torrents = instance.getTorrentList().getTorrents();
        final EventList<SingleListTorrent> basicEventList = GlazedLists.eventList(torrents);
        EventTableModel<SingleListTorrent> model = new EventTableModel<>(basicEventList, new ToorrentsTableFormat());
        
        jTable1.setModel(model);
//        jTable1.getColumnModel().getColumn(4).setCellRenderer(new ProgressRenderer());
    }

    @Override
    public void resultChanged(LookupEvent ev) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    class ProgressRenderer extends DefaultTableCellRenderer {

        private final JProgressBar b = new JProgressBar(0, 100);

        public ProgressRenderer() {
            super();
            setOpaque(true);
            b.setBorder(BorderFactory.createEmptyBorder(1, 1, 1, 1));
            b.setStringPainted(true);
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            Integer i = ((BigDecimal) value).intValue();
            String text = "Completed";
            if (i < 0) {
                text = "Error";
            } else if (i <= 100) {
                b.setValue(i);
                b.setString(i == 100 ? text : i + " %");
                return b;
            }
            super.getTableCellRendererComponent(table, text, isSelected, hasFocus, row, column);
            return this;
        }
    }

    static class ToorrentsTableFormat implements TableFormat<SingleListTorrent> {

        public ToorrentsTableFormat() {
        }

        @Override
        public int getColumnCount() {
            return 19;
        }

        @Override
        public String getColumnName(int column) {

            return column==0?"Hash":column==1?"Statuses":column==2?"Name":column==3?"Size":column==4?"% Ready":"";
//            return "";
        }

        @Override
        public Object getColumnValue(SingleListTorrent baseObject, int column) {
            if (column==1) {
                return baseObject.getStatuses();
            } else if (column==4) {
                return baseObject.getPercentReady().toString()+" %";
            }
            return baseObject.get(column);
        }
    }
}
