/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ru.asm0dey.utorrentaccess.gui;

import java.io.IOException;
import java.util.ArrayList;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.ServiceProvider;
import org.openide.windows.TopComponent;
import ru.asm0dey.utorrentaccess.services.IUseSingleTorrents;
import ru.asm0dey.utorrentaccess.utorrentclient.UTorrent;
import ru.asm0dey.utorrentaccess.utorrentclient.domain.FilesRequestResult;
import ru.asm0dey.utorrentaccess.utorrentclient.domain.SingleListTorrent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
    dtd = "-//ru.asm0dey.utorrentaccess.gui//TorrentInfo//EN",
autostore = false)
@TopComponent.Description(
    preferredID = "TorrentInfoTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "output", openAtStartup = true)
@ActionID(category = "Window", id = "ru.asm0dey.utorrentaccess.gui.TorrentInfoTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_TorrentInfoAction",
preferredID = "TorrentInfoTopComponent")
@Messages({
    "CTL_TorrentInfoAction=TorrentInfo",
    "CTL_TorrentInfoTopComponent=TorrentInfo Window",
    "HINT_TorrentInfoTopComponent=This is a TorrentInfo window"
})
@ServiceProvider(service = IUseSingleTorrents.class)
public final class TorrentInfoTopComponent extends TopComponent implements IUseSingleTorrents {


    public TorrentInfoTopComponent() {
        initComponents();
        setName(Bundle.CTL_TorrentInfoTopComponent());
        setToolTipText(Bundle.HINT_TorrentInfoTopComponent());
        putClientProperty(TopComponent.PROP_CLOSING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_DRAGGING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_MAXIMIZATION_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_SLIDING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_UNDOCKING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_KEEP_PREFERRED_SIZE_WHEN_SLIDED_IN, Boolean.TRUE);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jideLabel1 = new com.jidesoft.swing.JideLabel();

        org.openide.awt.Mnemonics.setLocalizedText(jideLabel1, org.openide.util.NbBundle.getMessage(TorrentInfoTopComponent.class, "TorrentInfoTopComponent.jideLabel1.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jideLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jideLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.jidesoft.swing.JideLabel jideLabel1;
    // End of variables declaration//GEN-END:variables

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void componentOpened() {
    }

    @Override
    public void componentClosed() {
    }

    @Override
    public void handle(SingleListTorrent torrent) {
        try {
            StringBuilder builder = new StringBuilder();
            final UTorrent instance = UTorrent.getInstance("192.168.1.2", 8080, "admin", "");
            final FilesRequestResult filesByTorrentHash = instance.getFilesByTorrentHash(torrent.getHash());
            builder.append("\n").append(filesByTorrentHash.toString());
            jideLabel1.setText(builder.toString());
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }
}
